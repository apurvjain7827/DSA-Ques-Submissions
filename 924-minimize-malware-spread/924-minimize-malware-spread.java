class Solution {
    public int minMalwareSpread(int[][] graph, int[] initial) {
        parent = new int[graph.length];
        rank = new int[graph.length];
        for(int i=0; i<graph.length; i++){
            parent[i] = i;
            rank[i] = 0;
        }
        
        for(int i=0; i<graph.length; i++){
            for(int j=0; j<graph.length; j++){
                if(graph[i][j] == 1 && i != j){
                    int s1l = find(i);
                    int s2l = find(j);
                    union(s1l, s2l);
                }
            }
        }
        if(initial.length == 0){
            return 0;
        }
        
        
        HashMap<Integer, Integer> hm1 = new HashMap<>();
        for(int i=0; i<parent.length; i++){
            int par = find(i);
            if(!hm1.containsKey(par)){
                hm1.put(par, 0);
            }
            hm1.put(par, hm1.get(par) + 1);
        }
        
        boolean[] res = new boolean[parent.length];
        Arrays.fill(res, false);
        for(int i=0; i<initial.length; i++){
            if(!res[parent[initial[i]]]){
                res[parent[initial[i]]] = true;
                continue;
            }
            hm1.put(parent[initial[i]], 0);
        }
        int max = -1;
        Arrays.sort(initial);
        int retVal = initial[0];
        for(int i=0; i<initial.length; i++){
            if(hm1.get(parent[initial[i]]) == 0){
                continue;
            }
            // max = Math.max(max, hm1.get(parent[initial[i]]));
            if(hm1.get(parent[initial[i]]) == max){
                if(retVal > initial[i]){
                    retVal = initial[i];
                }
            }
            if(hm1.get(parent[initial[i]]) > max){
                max = hm1.get(parent[initial[i]]);
                retVal = initial[i];
            }
        }
        
        return retVal;
    }
    
    int[] parent;
    int[] rank;
    
    public int find(int x){
        if(parent[x] == x){
            return x;
        }
        else{
            parent[x] = find(parent[x]);
            return parent[x];
        }
    }
    
    public void union(int s1l, int s2l){
        if(rank[s1l] > rank[s2l]){
            parent[s2l] = s1l;
        }
        else if(rank[s2l] > rank[s1l]){
            parent[s1l] = s2l;
        }
        else{
            parent[s2l] = s1l;
            rank[s1l]++;
        }
    }
}